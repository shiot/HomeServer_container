#!/bin/bash

ctRootpw=$(createPassword 12)   # Create Rootpassword for Container
nasneeded=false                 # Container need/can have a NAS
dvbneeded=false                 # Container need/can have a DVB/TV-Card
vganeeded=false                 # Container need/can have a VGA-Card
ctTemplate=osUbuntu                # Type of Hostsystem - ubuntu, debian, so on
lxchostname=iDBGrafana            # Name of the Container
hddsize=4                       # HDD Size in GB
cpucores=1                      # Number of CPU cores
memory=512                      # Memorysize in MB
swap=512                        # SWAP size in MB
unprivileged=1                  # Privileged/Unprivileged Container, 0=False - 1=True
features=""                     # force_rw_sys=<1|0>,fuse=<1|0>,keyctl=<1|0>,mknod=<1|0>,mount=<fstype;fstype;...>,nesting=<1|0> in quotation marks
containerFolder="/var/lib/grafana/dashboards/"              # Space separated list of folders ("/root/DOCKER" "/media/movies") - NAS Folders will create automaticly (/mnt/backup and /media)
containerSoftware="influxdb grafana"            # Space separated list of packages to install (curl wget)
fwPort=( 3000 8086 8088 8089 )
fwNetwork=( pnetwork network network network )
fwProtocol=( tcp tcp tcp udp )
fwDescription=( Webpanel "" "" "" )
functions=""                    # Functions in this template that are executed after a container restart

# Commands to be executed in the container's shell before the actual software is installed. For example, generating a repository
# list (echo \"deb https://download.example.com/repo/ubuntu focal main\" | tee /etc/apt/sources.list.d/example.list) or adding a
# PPA, for example (apt-add-repository -y ppa:example/example). or download a Docker-Compose configuration file (wget -qO - /root/docker/file.conf https://example.domain.com/file.conf).
# Finish every Command line with space Backslash.
# If you install a SQL database and need to do a SQL secure, this can be done with the command/call to the function "lxcSQLSecure".
commandsFirst="\ 
              wget -qO - https://repos.influxdata.com/influxdb.key | apt-key add - > /dev/null 2>&1 \ 
              wget -qO - https://packages.grafana.com/gpg.key | apt-key add - > /dev/null 2>&1 \ 
              echo \"deb https://repos.influxdata.com/debian buster stable\" > /etc/apt/sources.list.d/influxdb.list \ 
              echo \"deb https://packages.grafana.com/oss/deb stable main\" > /etc/apt/sources.list.d/grafana.list \ 
"

# Commands to be executed in the container's shell before the actual software is installed. For example, generating a repository
# list (echo \"deb https://download.example.com/repo/ubuntu focal main\" | tee /etc/apt/sources.list.d/example.list) or adding a
# PPA, for example (apt-add-repository -y ppa:example/example). or download a Docker-Compose configuration file (wget -qO - /root/docker/file.conf https://example.domain.com/file.conf).
# Finish every Command line with space Backslash.
commandsSecond="\ 
               wget -qO /var/lib/grafana/dashboards/proxmox.json $containerURL/$lxcName/pveDashboard.json && chown grafana:grafana /var/lib/grafana/dashboards/proxmox.json \ 
               echo -e \"[[udp]]\n enabled = true\n bind-address = \"0.0.0.0:8089\"\n database = \"proxmox\"\n batch-size = 1000\n batch-timeout = \"1s\" >> /etc/influxdb/influxdb.conf \ 
               sed -i 's+;default_home_dashboard_path =+default_home_dashboard_path = /var/lib/grafana/dashboards/proxmox.json+g' /etc/grafana/grafana.ini \ 
               sed -n -i '$!N; s/\# enable anonymous access\n\;enabled = false/\# enable anonymous access\n\enabled = true/g;p' /etc/grafana/grafana.ini \ 
               sed -i 's+;allow_embedding = false+allow_embedding = true+g' /etc/grafana/grafana.ini \ 
               echo -e \"apiVersion: 1\n\ndatasources:\n  - name: Proxmox\n    type: influxdb\n    url: http://localhost:8086\n    access: proxy\n    database: proxmox\" > /etc/grafana/provisioning/datasources/proxmox.yaml \ 
               echo -e \"apiVersion: 1\n\nproviders:\n  - name: SmartHome-IoT\n    type: file\n    disableDeletion: true\n    updateIntervalSeconds: 60\n    options:\n      path: /var/lib/grafana/dashboards\n      foldersFromFilesStructure: true\" > /etc/grafana/provisioning/dashboards/proxmox.yaml \ 
               grafana-cli plugins install grafana-clock-panel > /dev/null 2>&1 \ 
               grafana-cli plugins install natel-discrete-panel > /dev/null 2>&1 \ 
               grafana-cli admin reset-admin-password changeme > /dev/null 2>&1 \ 
               systemctl stop grafana-server \ 
               rm /var/log/grafana/grafana.log \ 
               chown grafana:grafana /var/lib/grafana/* \ 
               systemctl unmask influxdb.service && systemctl start influxdb \ 
               systemctl daemon-reload && systemctl enable grafana-server > /dev/null 2>&1 && systemctl start grafana-server \ 
"
containerDescription=$(echo -e "\ 
WebGUI (Grafana)
$lng_webadress:      http://$ctIP:3000
$lng_user:     admin
$lng_password:     changeme
")

# Commands to be executes in the Host (Proxmox) shell. For example (echo -e "influxdb: InfluxDB\n        port 8089\n        server $nextCTIP" > /etc/pve/status.cfg) to connect your Proxmox
# Host to influxDB as metric Server.
pveCommands="\ 
              echo -e "influxdb: InfluxDB\n        port 8089\n        server $nextCTIP" > /etc/pve/status.cfg \ 
"
